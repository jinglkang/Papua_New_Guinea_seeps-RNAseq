#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long 'HelpMessage';
use File::Basename;

my $usage=<<_EOH_;;
----------------------------------------------------------
annotate sequences in fasta file by swiss-prot
Usage:
annotate --fasta 1.fasta
                                Kang 2021-10-05
----------------------------------------------------------
_EOH_
;

GetOptions(
        'fasta:s', \my $fasta,  # the input fasta file
        'help', \ my $help
        );

if ($help || (! $fasta)) {
        die $usage;
}

my $blastp_swis;
my $swis_db="/home/kang1234/swiss-prot/uniprot-filtered-reviewed_yes.fasta"; # the swiss-prot database name
my $swis_db_name=basename $swis_db; # $swis_base_name: uniprot-filtered-reviewed_yes.fasta
my $swis_dir=dirname $swis_db; # $swis_dir: /home/kang1234/swiss-prot

# examine whether the diamond database were built
&examine_db();

# extract info from the header of swissdb fasta file: uniprot-filtered-reviewed_yes.fasta
# output: swiss_pro_info.txt
&extract_swissdb_info();

# diamond blastp to swis
$blastp_swis="diamond blastp -q $fasta ";
$blastp_swis.="-e 1e-5 --sensitive -k 1 -d $swis_db ";
$blastp_swis.="--out swis-blastp.result";
system($blastp_swis);

# save the sequence length of $fasta
my %query;
my $name;
my @names;
open FASTA, "$fasta" or die "There is no $fasta\n";
while (<FASTA>) {
        chomp;
    if (/>/) {
        s/>//;
        my @a=split;
        $name=$a[0];
        push @names, $name;
    } else {
        $query{$name}={
                'seq' => $_,
                'len' => length($_)
        };
    }
}
close FASTA;

my (%swis_blastp, %swis_info);
my $swis_info="/home/kang1234/swiss-prot/swiss_pro_info.txt";
open SWIS_INFO, $swis_info or die "can not open $swis_info\n";
while (<SWIS_INFO>) {
        chomp;
    my @a=split /\t/;
    my $uni_acc=$a[0];
    $swis_info{$uni_acc}={
        'gene_name' => $a[1],
        'length' => $a[2]
    };
}
close SWIS_INFO;

my $blastp_swis_result="swis-blastp.result";
open BLASTP_SWIS, $blastp_swis_result or die "can not open $blastp_swis_result\n";
while (<BLASTP_SWIS>) {
        chomp;
    my @a=split;
    my $q_name=$a[0];
    my $iden=$a[2];
    my $q_a_len=$a[7]-$a[6]+1;
    my $s_a_len=$a[9]-$a[8]+1;
    my $score=$a[-1];
    my @b=split /\|/, $a[1];
    my $uni_acc=$b[1];
    (my $uni_name)=$b[2]=~/(.*?)\_/;
    if ($swis_blastp{$q_name}) {
        my $old_score=$swis_blastp{$q_name}->{'score'}; # sometimes the query hit will occur twice
        if ($score>$old_score) { # select the hit with higher score
                $swis_blastp{$q_name}={
                        'uni_acc' => $uni_acc,
                        'iden' => $iden,
                        'q_a_len' => $q_a_len,
                        's_a_len' => $s_a_len,
                        'score' => $score,
                        'gene_name' => $uni_name
                };
        }
    } else {
        $swis_blastp{$q_name}={
                'uni_acc' => $uni_acc,
                'iden' => $iden,
                'q_a_len' => $q_a_len,
                's_a_len' => $s_a_len,
                'score' => $score,
                'gene_name' => $uni_name
        };
    }
}
close BLASTP_SWIS;

(my $file_name)=$fasta=~/(.*)\.fasta/;
my $ano=$file_name.".ano";
open ANO, ">$ano" or die "can not open $ano\n";

foreach my $name (@names) {
        my $q_len=$query{$name}->{'len'};
    my $newname=$name;
    if ($swis_blastp{$name}) {
        my $key=$swis_blastp{$name}->{'gene_name'};
        my $uni_acc=$swis_blastp{$name}->{'uni_acc'};
        my $sub_len=$swis_info{$uni_acc}->{'length'};
        my $s_a_len=$swis_blastp{$name}->{'s_a_len'};
        my $q_a_len=$swis_blastp{$name}->{'q_a_len'};
        my $iden=$swis_blastp{$name}->{'iden'};
        my $scov=($s_a_len/$sub_len)*100;
        my $genename=$swis_info{$uni_acc}->{'gene_name'};
        $scov=sprintf("%.2f",$scov);
        my $qcov=($q_a_len/$q_len)*100;
        $qcov=sprintf("%.2f",$qcov);
        print ANO "$newname\tqcov=\"$qcov\";scov=\"$scov\";identity=\"$iden\";qlenth=\"$q_len\";slenth=\"$sub_len\";db_accession=\"$uni_acc\";db=\"swiss-prot\"\tGene_Name=\"$key\"\tName=\"$genename\"\n";
    }
}
close ANO;

my (%hash1, %hash2);
my @gene_names;
open ANO, "$ano" or die "can not open $ano\n";
while (<ANO>) {
        chomp;
        my @a=split /\t/;
        (my $gene_name)=$_=~/Gene_Name=\"(.*?)\"/;
        $hash1{$gene_name}++;
        push @gene_names, $gene_name if $hash1{$gene_name}==1;
        (my $len)=$_=~/qlenth=\"(.*?)\"/;
        if ($hash2{$gene_name}) {
                my $old_len=$hash2{$gene_name}->{'len'};
                if ($len>$old_len) {
                        $hash2{$gene_name}={
                                'len' => $len,
                                'info' => $_
                        };
                }
        } else {
                $hash2{$gene_name}={
                        'len' => $len,
                        'info' => $_
                };
        }
}

my $final=$file_name.".ano.longest";
my $final_seq=$file_name.".ano.longest.fasta";
open FINAL, ">$final" or die "can not create $final\n";
open FINAL_FA, ">$final_seq" or die "can not create $final_seq\n";
foreach my $gene (@gene_names) {
        my $info=$hash2{$gene}->{'info'};
        my @a=split /\t/, $info;
        my $seq=$query{$a[0]}->{'seq'};
        print FINAL "$info\n";
        print FINAL_FA ">$a[0]\n$seq\n";
}
close FINAL;
close FINAL_FA;

`rm $blastp_swis_result`;

#######################
# examine database
sub examine_db {
        my $swis_db=$swis_db_name.".dmnd";
        if (! -e "$swis_dir/$swis_db") {
                die "There is no diamond database for swiss-prot\n";
        }
}

# extract the information from the swiss-prot fasta file
# uniprot-filtered-reviewed_yes.fasta
# save uniprot accession, gene, length into swiss_pro_info.txt
sub extract_swissdb_info {
        my $info="$swis_dir/swiss_pro_info.txt";
        my $swis_fasta="$swis_dir/uniprot-filtered-reviewed_yes.fasta";
        if (! -e $swis_fasta) {
                open INFO, ">$info";
                my (@names);
                my $name;
                my %hash;
                open SWIS_FASTA, $swis_fasta or die "can not open $swis_fasta\n";
                while (<SWIS_FASTA>) {
                        chomp;
                        if (/>/) {
                                my @a=split /\|/;
                                my $uni_acc=$a[1];
                                (my $pro_name)=$_=~/\s+?(.*)?\s+OS=/;
                                (my $organ)=$_=~/OS=(.*)?\s+OX=/;
                                $name=$uni_acc."\t".$pro_name." [".$organ."]";
                #               $organ?(print "$name\n"):(die "these is no organism name\n");
                                push @names, $name;
                        } else {
                                $hash{$name}.=$_;
                        }
                }
                close SWIS_FASTA;
                foreach my $name (@names) {
                        my $len=length($hash{$name});
                        print INFO "$name\t$len\n";
                }
                close INFO;
        }
}
